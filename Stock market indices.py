
# coding: utf-8

# In[2]:


"""
Template for week 3 project in Data Visualization

Read, clean, and plot financial time series from stock indices using matplotlib
"""

import csv
import datetime
import matplotlib.pyplot as plt
import matplotlib.dates as mdates


# In[3]:


# Resource paths
DATA_PATH = "data/"
PLOTS_PATH = "plots/"

# Financial data files
DJIA_34 = DATA_PATH + "DJIA_34.csv"
DJIA = DATA_PATH + "DJIA.csv"
NASDAQ_100 = DATA_PATH + "NASDAQ_100.csv"
NASDAQ = DATA_PATH + "NASDAQ.csv"
SP500 = DATA_PATH + "SP500.csv"


# In[4]:


###################################################################
# Part 1 - Read, clean, and plot financial time series data 

def read_series(index_file):
    """
    Input: String index_file for CSV file containing stock index data
    
    Output: Time series as a list of tuples where each tuple is
    a pair of strings corresponding to a row in the CSV file
    """ 
    with open(index_file, newline='') as file:
        reader = csv.reader(file)
        index_series = [tuple(row) for row in reader]
        return index_series


# In[5]:


def clean_series(raw_series):
    """
    Input: List raw_series whose entries are tuples (date, price)
    where dates corresponding to holidays have price "."
    
    Output: A list whose entries are tuples consisting of
    a date (string) and a price (float). Entries corresponding
    to the header and holidays have been removed.
    """
    clean_series_list = []
    for ind in range(len(raw_series)):
        if(raw_series[ind][1] == "." or ind == 0):
            continue
        clean_series_list.append((raw_series[ind][0], float(raw_series[ind][1])))
    return clean_series_list


# In[6]:


def plot_prices(index_file):
    """
    Input: String index_file corresponding to a csv file
    containing financial time series data
    
    Output: matplotlib figure consistin of a line plot 
    of prices from cleaned series
    y-axis should have appropriate label
    """
    raw_series = read_series(index_file)
    final_clean_series = clean_series(raw_series)
    x_axs = [i[0] for i in final_clean_series]
    y_axs = [i[1] for i in final_clean_series]
    fig, axs = plt.subplots()
    axs.plot(x_axs, y_axs)
    plt.ylabel("price_index")
    fig.savefig()
    return fig


# In[10]:


###########################################################
# Part 2 - Convert ISO data format to days and make better plots

def isodate_to_day(isodate):
    """
    Input: A string date in ISO date format

    Output: Float corrspending to mumber of days used in
    matplotlib's plt.plot_date()
    """
    date_datetype = datetime.datetime.strptime(isodate, '%Y-%m-%d')
    date_numtype = mdates.date2num(date_datetype)   
    
    return date_numtype    


# In[21]:


###########################################################
# Student code for more plots in matplotlib (peer-graded)

def plot_dates_prices(index_file):
    """
    Input: Strings index_file for CSV file with stock index data
    
    Output: matplotlib figure generated by reading the CSV file
    index_file and plotting the dates/prices using isodate_to_day()
    """
    raw_series = read_series(index_file)
    final_clean_series = clean_series(raw_series)
    x_axs = []
    for serie in final_clean_series:
        date = isodate_to_day(serie[0])
        x_axs.append(date)
    y_axs = [serie[1] for serie in final_clean_series]
    fig, axs = plt.subplots()  
    axs.plot_date(x_axs, y_axs, '-')
    axs.tick_params(axis='y')
    axs.tick_params(axis='x')
    plt.ylabel("price_index")
    plt.xlabel("year")
    fig.savefig("Time-varying Price Index")
    return fig


# In[27]:


def plot_two_indices(index_file1, index_file2):
    """
    Input: Strings index_file1 and index_file2
    with CSV data for pair of stock indices
    
    Output: matplotlib figure generated by plotting a comparison
    of the price of two indices in the style of 
    https://matplotlib.org/gallery/api/two_scales.html
    """
    
    raw_series1 = read_series(index_file1)
    final_clean_series1 = clean_series(raw_series1)
    x_axs = []
    for ind in final_clean_series1:
        date = isodate_to_day(ind[0])
        x_axs.append(date)
    y_axs1 = [i[1] for i in final_clean_series1]
    
    raw_series2 = read_series(index_file2)
    final_clean_series2 = clean_series(raw_series2)
    x_axs2 = []
    for ind in final_clean_series2:
        date = isodate_to_day(ind[0])
        x_axs2.append(date)
    y_axs2 = [i[1] for i in final_clean_series2]
    
    fig, ax1 = plt.subplots()
    ax1.set_xlabel('Date')
    ax1.set_ylabel('price_index_1')
    ax1.plot(x_axs, y_axs1)
    ax1.tick_params(axis='y')

    ax2 = ax1.twinx()  
    ax2.set_ylabel('price_index_2')  # we already handled the x-label with ax1
    ax2.plot(x_axs2, y_axs2)
    ax2.tick_params(axis='y')
    ax2.tick_params(axis='x')
    fig.tight_layout()  
    fig.savefig("Time-varying Price Index")
    return fig

