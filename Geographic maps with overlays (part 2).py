
# coding: utf-8

# In[2]:


"""
Template for week 9 project in Data Visualization

Read in two CSV files as dataframes using pandas
Join these two frames based on a common index
Overlay results on USA map
"""

import math
import matplotlib as mpl
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
from PIL import Image


# In[3]:


# Resource paths
PLOTS_PATH = "plots/"
DATA_PATH = "data/"

# Headers for dataframes
FIPS, X_CENTER, Y_CENTER, POP, RISK = "FIPS", "x center", "y center", "population", "cancer risk"
COL_TYPES = {FIPS : "str", X_CENTER : "float", Y_CENTER : "float", POP : "int", RISK : "float"}
DATAFRAMES = {}


# In[4]:


###################################################################################
# Part 1 - Load and manipulate dataframes 


def csv_to_dataframe(file_name, col_idxs, col_names, col_types):
    """
    Input: String file_name, list col_idxs of integers, 
    list col_names of strings, list col_types of types
    
    Output: Dataframe generated by reading the specified csv using pandas
    """
    daf = pd.read_csv(file_name, header=None, names=col_names, usecols=col_idxs, dtype=col_types)
    
    return daf


# In[6]:


def merge_by_column(df1, df2, col_name):
    """
    Input: Dataframes df1, df2, string col_name
    
    Output: Dataframe formed by merging the input dataframes based
    on the specified shared column.  Returned rows must share
    a common entry in the specified column.
    """
    mrg = df1.merge(df2, on=col_name)
    return mrg


# In[8]:


def get_high_risk(county_df, num_counties):
    """
    Input: Dataframe county_df, integer num_counties
    
    Output: Dataframe with num_counties rows consisting
    of counties with highest cancer risk. If num_counties
    is negative, return a dataframe consisting of countires
    with lowest cancer risk.
    
    NOTE: county_df should not be mutated
    """
    srt = county_df.sort_values('cancer risk')
    if num_counties < 0:
        return srt.head(-num_counties)
    return srt.tail(num_counties)


# In[10]:


###################################################################################
# Provided code for part 2


SIZE_CONSTANT = math.pi / (200.0 ** 2)

def marker_size(population):
    """
    Input: Integer population
    
    Output: Area of circle in pixels proportional to population for use in plt.scatter()
    """
    return  SIZE_CONSTANT * population


# In[11]:


MAX_LOG_RISK = math.log(1.50E-04, 10)    # maximum cancer risk in data
MIN_LOG_RISK = math.log(8.60E-06, 10)    # minimum cancer risk in data

def create_marker_color(color_map):
    """
    Input: Predefined color_map from matplotlib
    
    Output: Function that takes risk and returns color for use in plt.scatter()
    """
    
    # Note that this code is tricky and worth examining 
    risk_norm = mpl.colors.Normalize(vmin=MIN_LOG_RISK, vmax=MAX_LOG_RISK)
    color_mapper = mpl.cm.ScalarMappable(norm=risk_norm, cmap=color_map)
    
    # Return a function via a lambda expression
    return lambda risk: color_mapper.to_rgba(math.log(risk, 10))


# In[12]:


##################################################################################
# Part 2 - Plot USA map and overlaying risk data

PIXELS_PER_INCH = 80
USA_SVG_SIZE = [555, 352]

# Default DPI for notebook graphics is 72, override for higher resolution images
# You can experiment with lower DPIs and see the resulting artifacts
mpl.rcParams['figure.dpi'] = 100


# In[13]:


def plot_image(img_name, title="USA counties"):
    """
    Input: String img_name, optional string title
    
    Output: matplotlib figure of the specified USA map including the 
    specified title and specified size in inches as determined by PIXELS_PER_INCH
    """
    img = Image.open(img_name)
    width, height = img.size
    fig = plt.figure()
    fig.set_size_inches(width/PIXELS_PER_INCH, height/PIXELS_PER_INCH)
    axs = fig.add_subplot() 
    plt.imshow(img)
    axs.set_title(title)
    return fig


# In[28]:


def plot_risk_map(risk_df, img_name, title="Cancer risk map"):
    """
    Input: Dataframe risk_df, string img_name, optional string title
    
    Output: matplotlib figure with USA county map specified by img_name overlaid 
    with cancer risk data plotted at corresponding county centers
    Uses the functions marker_size() and marker_color() to determine the size/colors
    of the circular markers
    """
    fig = plot_image(img_name, title)
    axs = fig.add_subplot() 
    fig_size = fig.get_size_inches()
    rat1 = fig_size[0] * 80
    rat2 = fig_size[1] * 80 
    scaled_xcenters = [rat1 * x_coord/555 for x_coord in risk_df["x center"]]
    scaled_ycenters = [rat2 * y_coord/352 for y_coord in risk_df["y center"]]
    plt.subplots_adjust(left=0, right=1, top=1, bottom=0)
    axs.scatter(x=scaled_xcenters, y=scaled_ycenters, 
                c=[create_marker_color("jet")(risk) for risk in risk_df["cancer risk"]],
                s=[marker_size(pop) for pop in risk_df["population"]])
    return fig

